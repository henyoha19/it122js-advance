<html>
<head>
    <title>React App </title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">

const ItemList = (props) => {
    const bullets = props.items.map((item) => {
        return <li onClick={props.handleClick} key={item._id}>{item.carname}</li>
});
return <ul>{bullets}</ul>
}

const ItemDetail = (props) => {
    return <div>
      <h3>Details </h3>
      <form>
          carname:<input onChange={props.handleEdit} type="text" name="carname" value={props.item.carname ||""}  /><br/>
          color:<input onChange={props.handleEdit} type="text" name= "color" value={props.item.color ||""}  /> <br/>
          type:<input onChange={props.handleEdit} type="text" name="type" value={props.item.type ||""}  />      
      </form>
          <button onClick={props.handleClear}>Clear</button>
          <button onClick={props.handleDelete}>Delete</button>
          <button onClick={props.handleSave}>Save</button> 

    </div>
}
    class App extends React.Component{
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            items: {{{ cars }}},
            currentItem: { } // current selected item
          };
          this.selectItem =this.selectItem.bind(this);
          this.handleClear = this.handleClear.bind(this);
          this.handleEdit = this.handleEdit.bind(this);
          this.handleDelete = this.handleDelete.bind(this);
          this.handleSave = this.handleSave.bind(this);
       }
       handleSave() {
        let newItem = this.state.currentItem;
        if (!newItem.carname) {
          return;
        }

        fetch("/api/add/", {
          method: "POST",
        	headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newItem)
        }).then(res => res.json())
        	.then((json) => {

          let newData;
          if (!newItem._id) { // add new item to array
            newData = this.state.items;
            newItem._id = json._id;
            newData.push(newItem);
          } else { // update existing item 
            newData = this.state.items.map((item) => {
              if (item._id === newItem._id) {
                item = newItem; 
              }
              return item;
            });          
          }

// Update state with new array
          this.setState({items: newData});
        });
      }

          handleDelete () {
            console.log('delete me')
            fetch(`/api/delete/${this.state.currentItem._id}`)
              .then((response) => {
                 return response.json();
             })
              .then((result) => {
                console.log(result) 
                // on success, remove deleted item from this.state.items
              })
              .catch(err => console.log(err))
          }

        handleEdit (e) {
            let newItem = this.state.currentItem;
            newItem[e.target.name] = e.target.value;
            this.setState({currentItem: newItem});
          }

          handleClear () {
            this.setState({currentItem: {}})
          }

        selectItem (e) {
            const found = this.state.items.find((item) => {
              return item.carname === e.target.innerText;
            });
          
            this.setState({currentItem: found})
        }

      render() {
        // render app UI elements
        return (
          <div>
          <h2>Car List</h2>
         <ItemList 
         items={this.state.items} 
         handleClick={this.selectItem} />
         <hr />
         <ItemDetail item={this.state.currentItem} 
         handleClear={this.handleClear} 
         handleEdit={this.handleEdit}
         handleDelete={this.handleDelete}
         handleSave={this.handleSave}
         />
          </div>
          );
      }
    }
    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>